// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OQPATE.DB;

#nullable disable

namespace OQPATE.DB.Migrations
{
    [DbContext(typeof(MySQLContext))]
    [Migration("20231030163737_fix some proporties")]
    partial class fixsomeproporties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OQPATE.DB.Models.Cities", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.HasKey("CityID");

                    b.HasIndex("StateID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("OQPATE.DB.Models.Countries", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CountryID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("OQPATE.DB.Models.CountryStates", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .HasColumnType("longtext");

                    b.HasKey("StateID");

                    b.HasIndex("CountryID");

                    b.ToTable("CountryStates");
                });

            modelBuilder.Entity("OQPATE.DB.Models.EraseResults", b =>
                {
                    b.Property<int>("EraseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BusTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DevicePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EraseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EraseResult")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SanitizationMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EraseId");

                    b.ToTable("EraseResults");
                });

            modelBuilder.Entity("OQPATE.DB.Models.JobServices", b =>
                {
                    b.Property<int>("JobServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("JobServiceDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<float>("MinPrice")
                        .HasColumnType("float");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("JobServiceID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CountryID");

                    b.HasIndex("StateID");

                    b.HasIndex("UserID");

                    b.ToTable("JobServices");
                });

            modelBuilder.Entity("OQPATE.DB.Models.ServiceCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext");

                    b.HasKey("CategoryID");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("OQPATE.DB.Models.TestResults", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime");

                    b.HasKey("TestResultId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("OQPATE.DB.Models.TicketProcess", b =>
                {
                    b.Property<int>("ticketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EraseId")
                        .HasColumnType("int");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("identifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ticketID");

                    b.HasIndex("EraseId");

                    b.HasIndex("TestResultId");

                    b.ToTable("TicketProcesses");
                });

            modelBuilder.Entity("OQPATE.DB.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext");

                    b.Property<float?>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.Property<string>("UserLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte?>("UserPicture")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("UserState")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.HasIndex("CityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("StateID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OQPATE.DB.Models.Cities", b =>
                {
                    b.HasOne("OQPATE.DB.Models.CountryStates", "StatesCountryState")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatesCountryState");
                });

            modelBuilder.Entity("OQPATE.DB.Models.CountryStates", b =>
                {
                    b.HasOne("OQPATE.DB.Models.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("OQPATE.DB.Models.JobServices", b =>
                {
                    b.HasOne("OQPATE.DB.Models.ServiceCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OQPATE.DB.Models.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OQPATE.DB.Models.CountryStates", "State")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OQPATE.DB.Models.Users", "user")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("user");
                });

            modelBuilder.Entity("OQPATE.DB.Models.TicketProcess", b =>
                {
                    b.HasOne("OQPATE.DB.Models.EraseResults", "eraseResult")
                        .WithMany()
                        .HasForeignKey("EraseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OQPATE.DB.Models.TestResults", "testResult")
                        .WithMany()
                        .HasForeignKey("TestResultId");

                    b.Navigation("eraseResult");

                    b.Navigation("testResult");
                });

            modelBuilder.Entity("OQPATE.DB.Models.Users", b =>
                {
                    b.HasOne("OQPATE.DB.Models.Cities", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OQPATE.DB.Models.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OQPATE.DB.Models.CountryStates", "State")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });
#pragma warning restore 612, 618
        }
    }
}
